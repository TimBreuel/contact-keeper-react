{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, GET_CONTACTS } from \"../type\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload),\n        loading: false\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload,\n        loading: false\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null,\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          //matches global upper and lowercase\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n        loading: false\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null,\n        loading: false\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/timbreuel/Desktop/contact-keeper/client/src/context/contact/ContactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","state","action","type","contacts","payload","loading","filter","contact","id","current","map","filtered","regex","RegExp","name","match","email","error"],"mappings":"AAAA,SACEA,WADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,YAPF,EAQEC,aARF,EASEC,YATF,QAUO,SAVP;AAYA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKH,YAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFZ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFL;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKb,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CACPC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OAD3B,CAFL;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELS,QAAAA,OAAO,EAAER,MAAM,CAACG,OAFX;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKX,aAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELS,QAAAA,OAAO,EAAE,IAFJ;AAGLJ,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKV,cAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,GAAf,CAAoBH,OAAD,IAC3BA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OAAP,CAAeI,EAA9B,GAAmCP,MAAM,CAACG,OAA1C,GAAoDG,OAD5C,CAFL;AAKLF,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAQF,SAAKT,eAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELW,QAAAA,QAAQ,EAAEX,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAuBC,OAAD,IAAa;AAC3C;AACA,gBAAMK,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEZ,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,OAAO,CAACO,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BL,OAAO,CAACS,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAJS,CAFL;AAOLP,QAAAA,OAAO,EAAE;AAPJ,OAAP;;AAUF,SAAKR,YAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELW,QAAAA,QAAQ,EAAE,IAFL;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKP,aAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELiB,QAAAA,KAAK,EAAEhB,MAAM,CAACG,OAFT;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF;AACE,aAAOL,KAAP;AApEJ;AAsED,CAvED","sourcesContent":["import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n  GET_CONTACTS,\n} from \"../type\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false,\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false,\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n        loading: false,\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n        loading: false,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n        loading: false,\n      };\n\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n        loading: false,\n      };\n\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter((contact) => {\n          //matches global upper and lowercase\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n        loading: false,\n      };\n\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n        loading: false,\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}